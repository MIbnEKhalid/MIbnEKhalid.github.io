<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Panel - Support Management</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        body {
            background-color: #f8f9fa;
        }
        .sidebar {
            min-height: 100vh;
            background-color: #343a40;
        }
        .sidebar .nav-link {
            color: #adb5bd;
        }
        .sidebar .nav-link:hover,
        .sidebar .nav-link.active {
            color: #fff;
            background-color: #495057;
        }
        .status-badge {
            font-size: 0.75rem;
        }
        .priority-badge {
            font-size: 0.7rem;
        }
        .stat-card {
            border-left: 4px solid;
            transition: transform 0.2s;
        }
        .stat-card:hover {
            transform: translateY(-2px);
        }
        .loading {
            display: none;
        }
        .table-responsive {
            max-height: 600px;
        }
        .audit-trail {
            max-height: 200px;
            overflow-y: auto;
        }
        .navbar-brand {
            font-weight: bold;
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="#"><i class="fas fa-shield-alt"></i> Admin Panel</a>
            <span class="navbar-text">
                Support Management System
            </span>
        </div>
    </nav>

    <div class="container-fluid">
        <div class="row">
            <!-- Sidebar -->
            <div class="col-md-2 p-0">
                <nav class="sidebar">
                    <div class="p-3">
                        <ul class="nav flex-column">
                            <li class="nav-item">
                                <a class="nav-link active" href="#" onclick="showDashboard()">
                                    <i class="fas fa-tachometer-alt"></i> Dashboard
                                </a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="#" onclick="showSubmissions()">
                                    <i class="fas fa-inbox"></i> All Submissions
                                </a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="#" onclick="showSubmissions('pending')">
                                    <i class="fas fa-clock"></i> Pending
                                </a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="#" onclick="showSubmissions('in_progress')">
                                    <i class="fas fa-spinner"></i> In Progress
                                </a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="#" onclick="showSubmissions('resolved')">
                                    <i class="fas fa-check-circle"></i> Resolved
                                </a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="#" onclick="exportData()">
                                    <i class="fas fa-download"></i> Export
                                </a>
                            </li>
                        </ul>
                    </div>
                </nav>
            </div>

            <!-- Main Content -->
            <div class="col-md-10">
                <div class="p-4">
                    <!-- Dashboard View -->
                    <div id="dashboard-view">
                        <h2><i class="fas fa-tachometer-alt"></i> Dashboard</h2>
                        <div class="row mb-4" id="stats-container">
                            <!-- Stats will be loaded here -->
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="card">
                                    <div class="card-header">
                                        <h5><i class="fas fa-chart-line"></i> Recent Activity</h5>
                                    </div>
                                    <div class="card-body">
                                        <div id="recent-submissions">
                                            <!-- Recent submissions will be loaded here -->
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="card">
                                    <div class="card-header">
                                        <h5><i class="fas fa-exclamation-triangle"></i> High Priority Items</h5>
                                    </div>
                                    <div class="card-body">
                                        <div id="high-priority-items">
                                            <!-- High priority items will be loaded here -->
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Submissions View -->
                    <div id="submissions-view" style="display: none;">
                        <div class="d-flex justify-content-between align-items-center mb-4">
                            <h2><i class="fas fa-inbox"></i> <span id="submissions-title">Submissions</span></h2>
                            <div>
                                <button class="btn btn-sm btn-outline-primary" onclick="refreshSubmissions()">
                                    <i class="fas fa-sync-alt"></i> Refresh
                                </button>
                                <button class="btn btn-sm btn-success" onclick="exportSubmissions()">
                                    <i class="fas fa-download"></i> Export
                                </button>
                            </div>
                        </div>

                        <!-- Filters -->
                        <div class="card mb-4">
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-3">
                                        <label for="filter-status" class="form-label">Status</label>
                                        <select class="form-select" id="filter-status" onchange="applyFilters()">
                                            <option value="all">All Status</option>
                                            <option value="pending">Pending</option>
                                            <option value="in_progress">In Progress</option>
                                            <option value="resolved">Resolved</option>
                                            <option value="closed">Closed</option>
                                            <option value="on_hold">On Hold</option>
                                        </select>
                                    </div>
                                    <div class="col-md-3">
                                        <label for="filter-subject" class="form-label">Subject</label>
                                        <select class="form-select" id="filter-subject" onchange="applyFilters()">
                                            <option value="all">All Subjects</option>
                                            <option value="Support">Support</option>
                                            <option value="Feedback">Feedback</option>
                                            <option value="Collaboration">Collaboration</option>
                                            <option value="General Inquiry">General Inquiry</option>
                                        </select>
                                    </div>
                                    <div class="col-md-3">
                                        <label for="filter-priority" class="form-label">Priority</label>
                                        <select class="form-select" id="filter-priority" onchange="applyFilters()">
                                            <option value="all">All Priorities</option>
                                            <option value="urgent">Urgent</option>
                                            <option value="high">High</option>
                                            <option value="normal">Normal</option>
                                            <option value="low">Low</option>
                                        </select>
                                    </div>
                                    <div class="col-md-3">
                                        <label for="filter-search" class="form-label">Search</label>
                                        <input type="text" class="form-control" id="filter-search" placeholder="Search..." onkeyup="debounceSearch()">
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Submissions Table -->
                        <div class="card">
                            <div class="card-body">
                                <div class="table-responsive">
                                    <table class="table table-hover">
                                        <thead>
                                            <tr>
                                                <th>ID</th>
                                                <th>Ticket #</th>
                                                <th>Subject</th>
                                                <th>Name</th>
                                                <th>Email</th>
                                                <th>Status</th>
                                                <th>Priority</th>
                                                <th>Date</th>
                                                <th>Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody id="submissions-table-body">
                                            <!-- Table content will be loaded here -->
                                        </tbody>
                                    </table>
                                </div>
                                
                                <div class="d-flex justify-content-between align-items-center mt-3">
                                    <div id="pagination-info">
                                        <!-- Pagination info will be loaded here -->
                                    </div>
                                    <nav>
                                        <ul class="pagination" id="pagination-controls">
                                            <!-- Pagination controls will be loaded here -->
                                        </ul>
                                    </nav>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Submission Detail Modal -->
    <div class="modal fade" id="submissionModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Submission Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body" id="submission-details">
                    <!-- Submission details will be loaded here -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" onclick="saveSubmissionChanges()">Save Changes</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Loading Spinner -->
    <div class="loading position-fixed top-50 start-50 translate-middle">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        let currentPage = 1;
        let currentFilters = {};
        let currentSubmissionId = null;
        let searchTimeout = null;        // Authentication token - Get from server or config
        const AUTH_TOKEN = '{{adminToken}}' || 'test-token'; // Will be replaced by server

        // Initialize the page
        document.addEventListener('DOMContentLoaded', function() {
            showDashboard();
        });

        // Navigation functions
        function showDashboard() {
            document.getElementById('dashboard-view').style.display = 'block';
            document.getElementById('submissions-view').style.display = 'none';
            updateActiveNav('dashboard');
            loadDashboardData();
        }

        function showSubmissions(status = 'all') {
            document.getElementById('dashboard-view').style.display = 'none';
            document.getElementById('submissions-view').style.display = 'block';
            updateActiveNav('submissions');
            
            // Set filter if status is provided
            if (status !== 'all') {
                document.getElementById('filter-status').value = status;
                currentFilters.status = status;
            }
            
            loadSubmissions();
        }

        function updateActiveNav(section) {
            document.querySelectorAll('.nav-link').forEach(link => {
                link.classList.remove('active');
            });
        }

        // Dashboard functions
        async function loadDashboardData() {
            try {
                showLoading(true);
                  // Load stats
                const statsResponse = await fetch('/admin/dashboard/stats');
                
                if (statsResponse.ok) {
                    const stats = await statsResponse.json();
                    renderStats(stats);
                }                // Load recent submissions (limit 10)
                const recentResponse = await fetch('/admin/submissions?limit=10&sortBy=submission_timestamp&sortOrder=DESC');
                
                if (recentResponse.ok) {
                    const data = await recentResponse.json();
                    renderRecentActivity(data.submissions);
                }                // Load high priority items
                const priorityResponse = await fetch('/admin/submissions?priority=urgent,high&limit=10');
                
                if (priorityResponse.ok) {
                    const data = await priorityResponse.json();
                    renderHighPriorityItems(data.submissions);
                }

            } catch (error) {
                console.error('Error loading dashboard:', error);
                showAlert('Error loading dashboard data', 'danger');
            } finally {
                showLoading(false);
            }
        }

        function renderStats(stats) {
            const statsContainer = document.getElementById('stats-container');
            statsContainer.innerHTML = `
                <div class="col-md-3">
                    <div class="card stat-card" style="border-left-color: #007bff;">
                        <div class="card-body">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <h6 class="card-title text-muted">Total Submissions</h6>
                                    <h2 class="text-primary">${stats.total_submissions}</h2>
                                </div>
                                <div class="align-self-center">
                                    <i class="fas fa-inbox fa-2x text-primary"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card stat-card" style="border-left-color: #ffc107;">
                        <div class="card-body">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <h6 class="card-title text-muted">Pending</h6>
                                    <h2 class="text-warning">${stats.pending_count}</h2>
                                </div>
                                <div class="align-self-center">
                                    <i class="fas fa-clock fa-2x text-warning"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card stat-card" style="border-left-color: #28a745;">
                        <div class="card-body">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <h6 class="card-title text-muted">Resolved</h6>
                                    <h2 class="text-success">${stats.resolved_count}</h2>
                                </div>
                                <div class="align-self-center">
                                    <i class="fas fa-check-circle fa-2x text-success"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card stat-card" style="border-left-color: #dc3545;">
                        <div class="card-body">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <h6 class="card-title text-muted">Urgent</h6>
                                    <h2 class="text-danger">${stats.urgent_count}</h2>
                                </div>
                                <div class="align-self-center">
                                    <i class="fas fa-exclamation-triangle fa-2x text-danger"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }

        function renderRecentActivity(submissions) {
            const container = document.getElementById('recent-submissions');
            if (submissions.length === 0) {
                container.innerHTML = '<p class="text-muted">No recent submissions</p>';
                return;
            }
            
            container.innerHTML = submissions.map(submission => `
                <div class="d-flex justify-content-between align-items-center mb-2 p-2 border-bottom">
                    <div>
                        <strong>${submission.name}</strong> - ${submission.subject}
                        <br><small class="text-muted">${new Date(submission.submission_timestamp).toLocaleString()}</small>
                    </div>
                    <span class="badge bg-${getStatusColor(submission.status)}">${submission.status}</span>
                </div>
            `).join('');
        }

        function renderHighPriorityItems(submissions) {
            const container = document.getElementById('high-priority-items');
            if (submissions.length === 0) {
                container.innerHTML = '<p class="text-muted">No high priority items</p>';
                return;
            }
            
            container.innerHTML = submissions.map(submission => `
                <div class="d-flex justify-content-between align-items-center mb-2 p-2 border-bottom">
                    <div>
                        <strong>${submission.name}</strong> - ${submission.subject}
                        <br><small class="text-muted">${submission.ticket_number || 'No ticket'}</small>
                    </div>
                    <div class="text-end">
                        <span class="badge bg-${getPriorityColor(submission.priority)} mb-1">${submission.priority}</span>
                        <br><span class="badge bg-${getStatusColor(submission.status)}">${submission.status}</span>
                    </div>
                </div>
            `).join('');
        }

        function renderPagination(pagination) {
            const paginationInfo = document.getElementById('pagination-info');
            const paginationControls = document.getElementById('pagination-controls');
            
            // Update info
            const start = (pagination.currentPage - 1) * pagination.limit + 1;
            const end = Math.min(pagination.currentPage * pagination.limit, pagination.totalCount);
            paginationInfo.innerHTML = `Showing ${start}-${end} of ${pagination.totalCount} submissions`;
            
            // Update controls
            let controls = '';
            
            // Previous button
            if (pagination.currentPage > 1) {
                controls += `<li class="page-item"><a class="page-link" href="#" onclick="loadSubmissions(${pagination.currentPage - 1})">Previous</a></li>`;
            } else {
                controls += `<li class="page-item disabled"><span class="page-link">Previous</span></li>`;
            }
            
            // Page numbers
            const startPage = Math.max(1, pagination.currentPage - 2);
            const endPage = Math.min(pagination.totalPages, pagination.currentPage + 2);
            
            for (let i = startPage; i <= endPage; i++) {
                if (i === pagination.currentPage) {
                    controls += `<li class="page-item active"><span class="page-link">${i}</span></li>`;
                } else {
                    controls += `<li class="page-item"><a class="page-link" href="#" onclick="loadSubmissions(${i})">${i}</a></li>`;
                }
            }
            
            // Next button
            if (pagination.currentPage < pagination.totalPages) {
                controls += `<li class="page-item"><a class="page-link" href="#" onclick="loadSubmissions(${pagination.currentPage + 1})">Next</a></li>`;
            } else {
                controls += `<li class="page-item disabled"><span class="page-link">Next</span></li>`;
            }
            
            paginationControls.innerHTML = controls;
        }
        async function loadSubmissions(page = 1) {
            try {
                showLoading(true);
                
                const params = new URLSearchParams({
                    page: page,
                    limit: 50,
                    ...currentFilters
                });                const response = await fetch(`/admin/submissions?${params}`);

                if (response.ok) {
                    const data = await response.json();
                    renderSubmissionsTable(data.submissions);
                    renderPagination(data.pagination);
                    currentPage = page;
                } else {
                    throw new Error('Failed to load submissions');
                }

            } catch (error) {
                console.error('Error loading submissions:', error);
                showAlert('Error loading submissions', 'danger');
            } finally {
                showLoading(false);
            }
        }

        function renderSubmissionsTable(submissions) {
            const tbody = document.getElementById('submissions-table-body');
            tbody.innerHTML = submissions.map(submission => `
                <tr>
                    <td>${submission.id}</td>
                    <td>${submission.ticket_number || '-'}</td>
                    <td>${submission.subject}</td>
                    <td>${submission.name}</td>
                    <td>${submission.email}</td>
                    <td><span class="badge bg-${getStatusColor(submission.status)} status-badge">${submission.status}</span></td>
                    <td><span class="badge bg-${getPriorityColor(submission.priority)} priority-badge">${submission.priority}</span></td>
                    <td>${new Date(submission.submission_timestamp).toLocaleDateString()}</td>
                    <td>
                        <button class="btn btn-sm btn-outline-primary" onclick="viewSubmission(${submission.id})">
                            <i class="fas fa-eye"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-success" onclick="updateStatus(${submission.id}, 'resolved')">
                            <i class="fas fa-check"></i>
                        </button>
                    </td>
                </tr>
            `).join('');
        }

        function getStatusColor(status) {
            const colors = {
                'pending': 'warning',
                'in_progress': 'info',
                'resolved': 'success',
                'closed': 'secondary',
                'on_hold': 'dark'
            };
            return colors[status] || 'secondary';
        }

        function getPriorityColor(priority) {
            const colors = {
                'urgent': 'danger',
                'high': 'warning',
                'normal': 'primary',
                'low': 'secondary'
            };
            return colors[priority] || 'secondary';
        }

        // Filter functions
        function applyFilters() {
            currentFilters = {
                status: document.getElementById('filter-status').value,
                subject: document.getElementById('filter-subject').value,
                priority: document.getElementById('filter-priority').value,
                search: document.getElementById('filter-search').value
            };

            // Remove 'all' values
            Object.keys(currentFilters).forEach(key => {
                if (currentFilters[key] === 'all' || currentFilters[key] === '') {
                    delete currentFilters[key];
                }
            });

            loadSubmissions(1);
        }

        function debounceSearch() {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(() => {
                applyFilters();
            }, 500);
        }

        // Modal functions
        async function viewSubmission(id) {
            try {                const response = await fetch(`/admin/submissions/${id}`);

                if (response.ok) {
                    const submission = await response.json();
                    renderSubmissionDetails(submission);
                    currentSubmissionId = id;
                    new bootstrap.Modal(document.getElementById('submissionModal')).show();
                } else {
                    throw new Error('Failed to load submission details');
                }

            } catch (error) {
                console.error('Error loading submission details:', error);
                showAlert('Error loading submission details', 'danger');
            }
        }

        function renderSubmissionDetails(submission) {
            const detailsContainer = document.getElementById('submission-details');
            detailsContainer.innerHTML = `
                <div class="row">
                    <div class="col-md-6">
                        <h6>Basic Information</h6>
                        <p><strong>ID:</strong> ${submission.id}</p>
                        <p><strong>Ticket Number:</strong> ${submission.ticket_number || 'N/A'}</p>
                        <p><strong>Subject:</strong> ${submission.subject}</p>
                        <p><strong>Support Type:</strong> ${submission.support_type || 'N/A'}</p>
                        <p><strong>Name:</strong> ${submission.name}</p>
                        <p><strong>Email:</strong> ${submission.email}</p>
                        <p><strong>Phone:</strong> ${submission.phone_number || 'N/A'}</p>
                        <p><strong>Rating:</strong> ${submission.rating ? '★'.repeat(submission.rating) : 'N/A'}</p>
                    </div>
                    <div class="col-md-6">
                        <h6>Status & Management</h6>
                        <div class="mb-3">
                            <label class="form-label">Status</label>
                            <select class="form-select" id="modal-status">
                                <option value="pending" ${submission.status === 'pending' ? 'selected' : ''}>Pending</option>
                                <option value="in_progress" ${submission.status === 'in_progress' ? 'selected' : ''}>In Progress</option>
                                <option value="resolved" ${submission.status === 'resolved' ? 'selected' : ''}>Resolved</option>
                                <option value="closed" ${submission.status === 'closed' ? 'selected' : ''}>Closed</option>
                                <option value="on_hold" ${submission.status === 'on_hold' ? 'selected' : ''}>On Hold</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Priority</label>
                            <select class="form-select" id="modal-priority">
                                <option value="low" ${submission.priority === 'low' ? 'selected' : ''}>Low</option>
                                <option value="normal" ${submission.priority === 'normal' ? 'selected' : ''}>Normal</option>
                                <option value="high" ${submission.priority === 'high' ? 'selected' : ''}>High</option>
                                <option value="urgent" ${submission.priority === 'urgent' ? 'selected' : ''}>Urgent</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Assigned To</label>
                            <input type="text" class="form-control" id="modal-assigned" value="${submission.assigned_to || ''}" placeholder="Enter assignee name">
                        </div>
                    </div>
                </div>
                
                <div class="row mt-3">
                    <div class="col-12">
                        <h6>Message</h6>
                        <div class="bg-light p-3 rounded">${submission.message}</div>
                    </div>
                </div>

                <div class="row mt-3">
                    <div class="col-md-6">
                        <h6>Admin Notes</h6>
                        <textarea class="form-control" id="modal-admin-notes" rows="3" placeholder="Add admin notes...">${submission.admin_notes || ''}</textarea>
                    </div>
                    <div class="col-md-6">
                        <h6>Resolution Notes</h6>
                        <textarea class="form-control" id="modal-resolution-notes" rows="3" placeholder="Add resolution notes...">${submission.resolution_notes || ''}</textarea>
                    </div>
                </div>

                <div class="row mt-3">
                    <div class="col-12">
                        <h6>Audit Trail</h6>
                        <div class="audit-trail bg-light p-3 rounded">
                            ${submission.audit_trail ? submission.audit_trail.map(entry => `
                                <div class="mb-2">
                                    <small class="text-muted">${new Date(entry.timestamp).toLocaleString()}</small>
                                    <strong>${entry.action}</strong>
                                    ${entry.notes ? `<br><em>${entry.notes}</em>` : ''}
                                </div>
                            `).join('') : 'No audit trail available'}
                        </div>
                    </div>
                </div>
            `;
        }

        // Utility functions
        function showLoading(show) {
            document.querySelector('.loading').style.display = show ? 'block' : 'none';
        }

        function showAlert(message, type = 'info') {
            // Create and show bootstrap alert
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed top-0 start-50 translate-middle-x`;
            alertDiv.style.zIndex = '9999';
            alertDiv.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            document.body.appendChild(alertDiv);
            
            // Auto-remove after 5 seconds
            setTimeout(() => {
                if (alertDiv.parentNode) {
                    alertDiv.parentNode.removeChild(alertDiv);
                }
            }, 5000);
        }

        async function updateStatus(id, status) {
            try {                const response = await fetch(`/admin/submissions/${id}/status`, {
                    method: 'PATCH',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ status })
                });

                if (response.ok) {
                    showAlert(`Status updated to ${status}`, 'success');
                    loadSubmissions(currentPage);
                } else {
                    throw new Error('Failed to update status');
                }
            } catch (error) {
                console.error('Error updating status:', error);
                showAlert('Error updating status', 'danger');
            }
        }

        async function saveSubmissionChanges() {
            if (!currentSubmissionId) return;

            try {
                const status = document.getElementById('modal-status').value;
                const priority = document.getElementById('modal-priority').value;
                const assignedTo = document.getElementById('modal-assigned').value;
                const adminNotes = document.getElementById('modal-admin-notes').value;
                const resolutionNotes = document.getElementById('modal-resolution-notes').value;                // Update status
                const statusResponse = await fetch(`/admin/submissions/${currentSubmissionId}/status`, {
                    method: 'PATCH',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ status, adminNotes, assignedTo })
                });

                // Update priority
                const priorityResponse = await fetch(`/admin/submissions/${currentSubmissionId}/priority`, {
                    method: 'PATCH',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ priority })
                });

                // Add resolution notes if provided
                if (resolutionNotes && status === 'resolved') {                    await fetch(`/admin/submissions/${currentSubmissionId}/resolve`, {
                        method: 'PATCH',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ resolutionNotes })
                    });
                }

                if (statusResponse.ok && priorityResponse.ok) {
                    showAlert('Submission updated successfully', 'success');
                    bootstrap.Modal.getInstance(document.getElementById('submissionModal')).hide();
                    loadSubmissions(currentPage);
                } else {
                    throw new Error('Failed to update submission');
                }

            } catch (error) {
                console.error('Error saving changes:', error);
                showAlert('Error saving changes', 'danger');
            }
        }

        function refreshSubmissions() {
            loadSubmissions(currentPage);
        }

        async function exportSubmissions() {
            try {
                const params = new URLSearchParams(currentFilters);                const response = await fetch(`/admin/export/csv?${params}`);

                if (response.ok) {
                    const blob = await response.blob();
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = `support_submissions_${new Date().toISOString().split('T')[0]}.csv`;
                    document.body.appendChild(a);
                    a.click();
                    window.URL.revokeObjectURL(url);
                    document.body.removeChild(a);
                    showAlert('Export completed', 'success');
                } else {
                    throw new Error('Failed to export data');
                }
            } catch (error) {
                console.error('Error exporting data:', error);
                showAlert('Error exporting data', 'danger');
            }
        }

        function exportData() {
            exportSubmissions();
        }
    </script>
</body>
</html>
